package com.ares.service.algorithms.lc.e;

/**
 * 在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分别用字符 '.'，'B' 和 'p'
 * 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。
 *
 * 车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：
 *
 * 棋手选择主动停下来。
 * 棋子因到达棋盘的边缘而停下。
 * 棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
 * 车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
 * 你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。
 *
 * 示例1
 * 输入：
 * [[".",".",".",".",".",".",".","."],
 * [".",".",".","p",".",".",".","."],
 * [".",".",".","R",".",".",".","p"],
 * [".",".",".",".",".",".",".","."],
 * [".",".",".",".",".",".",".","."],
 * [".",".",".","p",".",".",".","."],
 * [".",".",".",".",".",".",".","."],
 * [".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 在本例中，车能够捕获所有的卒。
 *
 * 示例2
 * 输入：
 * [[".",".",".",".",".",".",".","."],
 * [".","p","p","p","p","p",".","."],
 * [".","p","p","B","p","p",".","."],
 * [".","p","B","R","B","p",".","."],
 * [".","p","p","B","p","p",".","."],
 * [".","p","p","p","p","p",".","."],
 * [".",".",".",".",".",".",".","."],
 * [".",".",".",".",".",".",".","."]]
 * 输出：0
 * 解释：
 * 象阻止了车捕获任何卒。
 *
 * 输入：
 * [[".",".",".",".",".",".",".","."],
 * [".",".",".","p",".",".",".","."],
 * [".",".",".","p",".",".",".","."],
 * ["p","p",".","R",".","p","B","."],
 * [".",".",".",".",".",".",".","."],
 * [".",".",".","B",".",".",".","."],
 * [".",".",".","p",".",".",".","."],
 * [".",".",".",".",".",".",".","."]]
 * 输出：3
 * 解释：
 * 车可以捕获位置 b5，d6 和 f5 的卒。
 *
 * 提示：
 * board.length == board[i].length == 8
 * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
 * 只有一个格子上存在 board[i][j] == 'R'
 *
 * @author  0xZzzz
 * @date 2020/3/26
 */
public class Demo1 {

    public static void main(String[] args) {
        // 棋盘
        String[][] board = {
            {".", ".", ".", ".", ".", ".", ".", "."},
            {".", ".", ".", "p", ".", ".", ".", "."},
            {".", ".", ".", "R", ".", ".", ".", "p"},
            {".", ".", ".", ".", ".", ".", ".", "."},
            {".", ".", ".", ".", ".", ".", ".", "."},
            {".", ".", ".", "p", ".", ".", ".", "."},
            {".", ".", ".", ".", ".", ".", ".", "."},
            {".", ".", ".", ".", ".", ".", ".", "."}
        };
        algorithms(board);
    }

    /**
     * 时间复杂度 O(n^2)
     * 空间复杂度 O(1)
     */
    private static void algorithms(String[][] board) {
        // 首先找到 R 的坐标
        int rx = -1, ry = -1;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ("R".equals(board[i][j])) {
                    rx = j;
                    ry = i;
                    break;
                }
            }
        }
        System.out.println(rx + "," + ry);
        // 声明四个方向，例如 上：x + 1 y 不动，以此类推
        int[][] d = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        // 吃掉P的总数
        int cnt = 0;
        // 遍历四个方向
        for (int i = 0; i < 4; i++) {
            for (int step = 0; ; ++step) {
                // x 轴的移动是纵坐标的变化
                int tx = ry + d[i][1] * step;
                // y 轴的移动是横坐标的变化
                int ty = rx + d[i][0] * step;
                if (tx < 0 || tx >= 8 || ty < 0 || ty >= 8 || "B".equals(board[tx][ty])) {
                    break;
                }
                if ("p".equals(board[tx][ty])) {
                    cnt++;
                    break;
                }
            }
        }
        System.out.println(cnt);
    }

}
